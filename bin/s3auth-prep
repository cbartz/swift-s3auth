#! /usr/bin/env python
# coding=utf-8
# Copyright 2017 Christopher Bartz <bartz@dkrz.de>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""Prepare the backing store Swiftcluster for use with the auth system."""

from argparse import ArgumentParser
from getpass import getpass
from sys import argv, exit

from swift.common.bufferedhttp import http_connect_raw as http_connect
from swift.common.utils import urlparse


if __name__ == '__main__':
    parser = ArgumentParser(description=__doc__)
    parser.add_argument(
        '-A', '--admin-url',
        default='http://127.0.0.1:8080/s3auth/', help='The URL to the auth '
        'subsystem (default: http://127.0.0.1:8080/s3auth/')
    parser.add_argument(
        '-P', '--prep-key',
        help='Preparation key: Must equal key in config file.')
    parser.add_argument(
        '-H', '--hash-key',
        help='Hash key used for hashing admin key.')
    parser.add_argument(
        '-K', '--admin-key',
        help='The key for the user with admin rights.')

    args = parser.parse_args(argv[1:])

    for arg in ('prep_key', 'hash_key', 'admin_key'):
        if not getattr(args, arg):
            setattr(args, arg,
                    getpass(' '.join(arg.title().split('_')) + ':'))

    parsed = urlparse(args.admin_url)
    if parsed.scheme not in ('http', 'https'):
        raise ValueError('Cannot handle protocol scheme %s for url %s' %
                         (parsed.scheme, repr(args.admin_url)))
    parsed_path = parsed.path
    if not parsed_path:
        parsed_path = '/'
    elif parsed_path[-1] != '/':
        parsed_path += '/'
    path = '{}v1/.prep'.format(parsed_path)
    headers = {'x-s3auth-prep-key': args.prep_key,
               'x-s3auth-hash-key': args.hash_key,
               'x-s3auth-admin-key': args.admin_key}
    conn = http_connect(parsed.hostname, parsed.port, 'POST', path, headers,
                        ssl=(parsed.scheme == 'https'))
    resp = conn.getresponse()
    if resp.status // 100 != 2:
        exit('Auth subsystem prep failed: {} {}'.format(
            resp.status, resp.reason))
